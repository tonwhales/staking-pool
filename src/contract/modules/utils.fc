(slice) elector_address() {
    var elector = config_param(1).begin_parse().preload_uint(256);
    return begin_cell()
           .store_uint(4, 3).store_uint(0xff, 8).store_uint(elector, 256)
           .end_cell()
           .begin_parse();
}

(slice) config_address() {
    var config = config_param(0).begin_parse().preload_uint(256);
    return begin_cell()
           .store_uint(4, 3).store_uint(0xff, 8).store_uint(config, 256)
           .end_cell()
           .begin_parse();
}

(int) equal_slices (slice s1, slice s2) asm "SDEQ";

;;
;; Parsing of a command from wallet
;;
(slice, (int)) ~parse_text_command(slice in_msg) {
    int op = 0;
    ;; 4 possible commands lock, stake, recover, withdraw
    int first_char = in_msg~load_uint(8);
    if (first_char == 108) { ;; l
      throw_unless(505, in_msg~load_uint(24) == 7299947); ;; ock
      op = 0x6c6f636b; ;; == lock
    }
    if (first_char == 114 ) { ;; r
      throw_unless(505, in_msg~load_uint(48) == 111477746197874); ;; ecover
      op = 0x7265636f; ;; == reco(ver)
    }
    if (first_char == 115 ) { ;; s
      throw_unless(505, in_msg~load_uint(32) == 1952541541); ;; take
      op = 0x7374616b; ;; stak(e)
    }
    if (first_char == 119 ) { ;; w
      throw_unless(505, in_msg~load_uint(56) == 29682864265257335); ;; ithdraw
      op = 0x77697468; ;; with(draw)
    }
    return (in_msg, (op));
}

(int, int) encode_number_to_text(int number) {
  int len = 0;
  int value = 0;
  int mult = 1;
  do {
    (number, int res) = number.divmod(10);
    value = value + (res + 48) * mult;
    mult = mult * 256;
    len = len + 1;
  } until (number == 0);
  return (len, value);
}

builder store_grams_string(builder msg, int amount) {
  (int ceil, int res) = divmod(amount, 1000000000);
  (int cl, int cv) = encode_number_to_text(ceil);
  msg = msg.store_uint(cv, cl * 8 );
  msg = msg.store_uint(46, 8); ;; "."
  (int rl, int rv) =  encode_number_to_text(res);
  repeat( 9 - rl ) {
    msg = msg.store_uint(48, 8); ;; " "
  }
  return msg.store_uint(rv, rl * 8);
}